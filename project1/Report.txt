Introduction: Project 1 introduces the student to using opengl to generate a plot of 4 signals read from a csv file.

Design: I passed all of vertex points (the signals and the axes) in by vertex.  There is no way for the GPU to generate the signals from the csv file, and the axes are only 2 points each, so this was the only option.  The color is choosen with a uniform integer.  I didn't see many benefits to passing a vec4 uniform for the color, and with the integer less data has to be passed.  I arranged all of the data in single vbo to vao pairs.  An alternative was to put all signals in one vao, and all axes in another; this would be similar to the arrangement in the threeTriangles example.  In that arrangement, three calls would be made to glDrawArrays with different offsets.  I choose my out of the desire to simplify; I am not sure whether it is more efficient to pass all of the data in one vao or in four vao s, it seems that the difference would be negligible.

Conclusion: I learned far more by doing this lab than being in class.  I need to learn how to read code and sit in on code reviews to learn about a product, rather than having to just use it.  My initial idea was to actually put each signal in a different ModelView, but the Controller class is structured to only have one ModelView.  Is there a debugger for GLSL shader programs?  Using gdb only works so far when working with GUIs.  I am not sure the best way to debug event listener design patterns in gdb.  However, once the low level memory handling method of opengl are understood, this project is simple.
